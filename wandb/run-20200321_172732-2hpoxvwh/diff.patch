diff --git a/notebooks/pytorch_transfer_learning-Serengeti.ipynb b/notebooks/pytorch_transfer_learning-Serengeti.ipynb
index 06aee72..1cbc29e 100644
--- a/notebooks/pytorch_transfer_learning-Serengeti.ipynb
+++ b/notebooks/pytorch_transfer_learning-Serengeti.ipynb
@@ -48,6 +48,9 @@
     "import time\n",
     "import os\n",
     "import copy\n",
+    "import timm\n",
+    "import wandb\n",
+    "\n",
     "\n",
     "# New Libraries\n",
     "\n",
@@ -59,7 +62,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -92,18 +95,18 @@
     "        transforms.RandomResizedCrop(224),\n",
     "        transforms.RandomHorizontalFlip(),\n",
     "        transforms.ToTensor(),\n",
-    "        transforms.Normalize([0.485, 0.456, 0.406, 0.406], [0.229, 0.224, 0.225, 0.225])\n",
+    "        #transforms.Normalize([0.485, 0.456, 0.406, 0.406], [0.229, 0.224, 0.225, 0.225])\n",
     "    ]),\n",
     "    'val': transforms.Compose([\n",
     "        transforms.Resize(256),\n",
     "        transforms.CenterCrop(224),\n",
     "        transforms.ToTensor(),\n",
-    "        transforms.Normalize([0.485, 0.456, 0.406, 0.406], [0.229, 0.224, 0.225, 0.225])\n",
+    "        #transforms.Normalize([0.485, 0.456, 0.406, 0.406], [0.229, 0.224, 0.225, 0.225])\n",
     "    ]),\n",
     "}\n",
     "\n",
     "\n",
-    "data_dir = 'data/amazon_tiff_data'\n",
+    "data_dir = '~/data'\n",
     "image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) for x in ['train', 'val']}\n",
     "\n",
     "\n",
@@ -117,148 +120,64 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "['0', '1']\n"
+      "Compose(\n",
+      "    RandomResizedCrop(size=(224, 224), scale=(0.08, 1.0), ratio=(0.75, 1.3333), interpolation=PIL.Image.BILINEAR)\n",
+      "    RandomHorizontalFlip(p=0.5)\n",
+      "    ToTensor()\n",
+      "    Normalize(mean=[0.485, 0.456, 0.406, 0.406], std=[0.229, 0.224, 0.225, 0.225])\n",
+      ")\n",
+      "Compose(\n",
+      "    Resize(size=256, interpolation=PIL.Image.BILINEAR)\n",
+      "    CenterCrop(size=(224, 224))\n",
+      "    ToTensor()\n",
+      "    Normalize(mean=[0.485, 0.456, 0.406, 0.406], std=[0.229, 0.224, 0.225, 0.225])\n",
+      ")\n"
      ]
     }
    ],
    "source": [
-    "print(class_names)"
+    "print(data_transforms['train'])\n",
+    "print(data_transforms['val'])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [
     {
-     "name": "stderr",
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff141234d30>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "    self._shutdown_workers()\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff141234d30>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    w.join()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "    w.join()\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "AssertionError: can only join a child process\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "AssertionError: can only join a child process\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff13df46940>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    w.join()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "AssertionError: can only join a child process\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff13df46940>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff13df4eba8>>\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "Traceback (most recent call last):\n",
-      "    w.join()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    w.join()\n",
-      "AssertionError: can only join a child process\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff13df4eba8>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    w.join()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "AssertionError: can only join a child process\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "AssertionError: can only join a child process\n",
-      "Traceback (most recent call last):\n",
-      "Traceback (most recent call last):\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "Traceback (most recent call last):\n",
-      "Traceback (most recent call last):\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "OSError: [Errno 9] Bad file descriptor\n"
+      "<torch.utils.data.dataloader.DataLoader object at 0x7f4d66c4b3c8>\n"
      ]
-    },
+    }
+   ],
+   "source": [
+    "print(dataloaders['train'])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
     {
-     "ename": "RuntimeError",
-     "evalue": "Caught RuntimeError in DataLoader worker process 0.\nOriginal Traceback (most recent call last):\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/worker.py\", line 178, in _worker_loop\n    data = fetcher.fetch(index)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py\", line 44, in fetch\n    data = [self.dataset[idx] for idx in possibly_batched_index]\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py\", line 44, in <listcomp>\n    data = [self.dataset[idx] for idx in possibly_batched_index]\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/datasets/folder.py\", line 140, in __getitem__\n    sample = self.transform(sample)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/transforms.py\", line 70, in __call__\n    img = t(img)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/transforms.py\", line 175, in __call__\n    return F.normalize(tensor, self.mean, self.std, self.inplace)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/functional.py\", line 218, in normalize\n    tensor.sub_(mean[:, None, None]).div_(std[:, None, None])\nRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 0\n",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
-      "\u001b[0;32m<ipython-input-14-feadf89a70ac>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# Get a batch of training data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclasses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataloaders\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'train'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# Make a grid from batch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    854\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m                 \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_task_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_process_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    857\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_try_put_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_process_data\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    879\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_put_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    880\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExceptionWrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 881\u001b[0;31m             \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreraise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    882\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    883\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/_utils.py\u001b[0m in \u001b[0;36mreraise\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    392\u001b[0m             \u001b[0;31m# (https://bugs.python.org/issue2651), so we work around it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    393\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKeyErrorMessage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 394\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexc_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
-      "\u001b[0;31mRuntimeError\u001b[0m: Caught RuntimeError in DataLoader worker process 0.\nOriginal Traceback (most recent call last):\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/worker.py\", line 178, in _worker_loop\n    data = fetcher.fetch(index)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py\", line 44, in fetch\n    data = [self.dataset[idx] for idx in possibly_batched_index]\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py\", line 44, in <listcomp>\n    data = [self.dataset[idx] for idx in possibly_batched_index]\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/datasets/folder.py\", line 140, in __getitem__\n    sample = self.transform(sample)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/transforms.py\", line 70, in __call__\n    img = t(img)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/transforms.py\", line 175, in __call__\n    return F.normalize(tensor, self.mean, self.std, self.inplace)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/functional.py\", line 218, in normalize\n    tensor.sub_(mean[:, None, None]).div_(std[:, None, None])\nRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 0\n"
-     ]
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
     }
    ],
    "source": [
@@ -271,9 +190,9 @@
     "def imshow(inp, title=None):\n",
     "    \"\"\"Imshow for Tensor.\"\"\"\n",
     "    inp = inp.numpy().transpose((1, 2, 0))\n",
-    "    mean = np.array([0.485, 0.456, 0.406, 0.406])\n",
-    "    std = np.array([0.229, 0.224, 0.225, 0.225])\n",
-    "    inp = std * inp + mean\n",
+    "    #mean = np.array([0.485, 0.456, 0.406, 0.406])\n",
+    "    #std = np.array([0.229, 0.224, 0.225, 0.225])\n",
+    "    #inp = std * inp + mean\n",
     "    inp = np.clip(inp, 0, 1)\n",
     "    plt.imshow(inp)\n",
     "    if title is not None:\n",
@@ -290,6 +209,26 @@
     "imshow(out, title=[class_names[x] for x in classes])\n"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([4, 3, 224, 224])"
+      ]
+     },
+     "execution_count": 8,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "inputs.size()"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": 4,
@@ -312,6 +251,8 @@
     "\n",
     "def train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n",
     "    since = time.time()\n",
+    "    wandb.init(project=\"serengeti-water\")\n",
+    "    wandb.watch(model)\n",
     "\n",
     "    best_model_wts = copy.deepcopy(model.state_dict())\n",
     "    best_acc = 0.0\n",
@@ -329,6 +270,10 @@
     "\n",
     "            running_loss = 0.0\n",
     "            running_corrects = 0\n",
+    "            #true_pos = 0\n",
+    "            #true_neg = 0\n",
+    "            #false_pos = 0\n",
+    "            #false_neg = 0\n",
     "\n",
     "            # Iterate over data.\n",
     "            for inputs, labels in dataloaders[phase]:\n",
@@ -350,17 +295,24 @@
     "                        loss.backward()\n",
     "                        optimizer.step()\n",
     "\n",
-    "                # statistics\n",
+    "                # statistics -- adding \n",
     "                running_loss += loss.item() * inputs.size(0)\n",
     "                running_corrects += torch.sum(preds == labels.data)\n",
+    "                #true_pos += torch.sum((preds == 1) == (labels.data == 1))\n",
+    "                #true_neg += torch.sum((preds != 1) == (labels.data == 0))\n",
+    "                #false_pos += torch.sum((preds == 1) == (labels.data == 0))\n",
+    "                #false_neg += torch.sum((preds == 0) == (labels.data == 1))\n",
     "            if phase == 'train':\n",
     "                scheduler.step()\n",
     "\n",
     "            epoch_loss = running_loss / dataset_sizes[phase]\n",
     "            epoch_acc = running_corrects.double() / dataset_sizes[phase]\n",
+    "            #epoch_prec = true_pos\n",
+    "            #epoch_f1\n",
     "\n",
     "            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n",
     "                phase, epoch_loss, epoch_acc))\n",
+    "            wandb.log({'Loss': epoch_loss, 'Accuracy': epoch_acc})\n",
     "\n",
     "            # deep copy the model\n",
     "            if phase == 'val' and epoch_acc > best_acc:\n",
@@ -381,7 +333,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 25,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -421,38 +373,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 5,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Downloading: \"https://download.pytorch.org/models/resnet18-5c106cde.pth\" to /home/ubuntu/.cache/torch/checkpoints/resnet18-5c106cde.pth\n"
-     ]
-    },
-    {
-     "data": {
-      "application/vnd.jupyter.widget-view+json": {
-       "model_id": "c0a16220b34346f6a899693a94cd5f07",
-       "version_major": 2,
-       "version_minor": 0
-      },
-      "text/plain": [
-       "HBox(children=(FloatProgress(value=0.0, max=46827520.0), HTML(value='')))"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "######################################################################\n",
     "# Finetuning the convnet\n",
@@ -461,8 +384,9 @@
     "# Load a pretrained model and reset final fully connected layer.\n",
     "#\n",
     "\n",
-    "model_ft = models.resnet18(pretrained=True)\n",
-    "num_ftrs = model_ft.fc.in_features\n",
+    "model_ft = timm.create_model('mixnet_l', pretrained=True)\n",
+    "\n",
+    "num_ftrs = model_ft.classifier.in_features\n",
     "# Here the size of each output sample is set to 2.\n",
     "# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).\n",
     "model_ft.fc = nn.Linear(num_ftrs, 2)\n",
@@ -481,201 +405,528 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 28,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 0/24\n",
-      "----------\n",
-      "train Loss: 0.6222 Acc: 0.6926\n",
-      "val Loss: 0.1738 Acc: 0.9346\n",
-      "\n",
-      "Epoch 1/24\n",
-      "----------\n",
-      "train Loss: 0.8634 Acc: 0.7377\n",
-      "val Loss: 0.3860 Acc: 0.8889\n",
-      "\n",
-      "Epoch 2/24\n",
-      "----------\n",
-      "train Loss: 0.6323 Acc: 0.7787\n",
-      "val Loss: 0.4995 Acc: 0.7843\n",
-      "\n",
-      "Epoch 3/24\n",
-      "----------\n",
-      "train Loss: 0.5152 Acc: 0.7664\n",
-      "val Loss: 0.3715 Acc: 0.8758\n",
-      "\n",
-      "Epoch 4/24\n",
-      "----------\n",
-      "train Loss: 0.5214 Acc: 0.7910\n",
-      "val Loss: 0.2577 Acc: 0.8954\n",
-      "\n",
-      "Epoch 5/24\n",
-      "----------\n",
-      "train Loss: 0.5611 Acc: 0.8074\n",
-      "val Loss: 0.2525 Acc: 0.9085\n",
-      "\n",
-      "Epoch 6/24\n",
-      "----------\n",
-      "train Loss: 0.4417 Acc: 0.8320\n",
-      "val Loss: 0.3667 Acc: 0.8693\n",
-      "\n",
-      "Epoch 7/24\n",
-      "----------\n",
-      "train Loss: 0.4239 Acc: 0.8279\n",
-      "val Loss: 0.2918 Acc: 0.9085\n",
-      "\n",
-      "Epoch 8/24\n",
-      "----------\n",
-      "train Loss: 0.4287 Acc: 0.8484\n",
-      "val Loss: 0.2830 Acc: 0.9150\n",
-      "\n",
-      "Epoch 9/24\n",
-      "----------\n",
-      "train Loss: 0.2964 Acc: 0.8689\n",
-      "val Loss: 0.2723 Acc: 0.9150\n",
-      "\n",
-      "Epoch 10/24\n",
-      "----------\n",
-      "train Loss: 0.3311 Acc: 0.8811\n",
-      "val Loss: 0.2610 Acc: 0.9281\n",
-      "\n",
-      "Epoch 11/24\n",
-      "----------\n",
-      "train Loss: 0.2874 Acc: 0.8648\n",
-      "val Loss: 0.2682 Acc: 0.9281\n",
-      "\n",
-      "Epoch 12/24\n",
-      "----------\n",
-      "train Loss: 0.2453 Acc: 0.8893\n",
-      "val Loss: 0.2517 Acc: 0.9346\n",
-      "\n",
-      "Epoch 13/24\n",
-      "----------\n",
-      "train Loss: 0.4938 Acc: 0.7828\n",
-      "val Loss: 0.2608 Acc: 0.9346\n",
-      "\n",
-      "Epoch 14/24\n",
-      "----------\n",
-      "train Loss: 0.2994 Acc: 0.8484\n",
-      "val Loss: 0.2360 Acc: 0.9281\n",
-      "\n",
-      "Epoch 15/24\n",
-      "----------\n",
-      "train Loss: 0.2433 Acc: 0.9016\n",
-      "val Loss: 0.2441 Acc: 0.9216\n",
-      "\n",
-      "Epoch 16/24\n",
-      "----------\n",
-      "train Loss: 0.2429 Acc: 0.9057\n",
-      "val Loss: 0.2429 Acc: 0.9085\n",
-      "\n",
-      "Epoch 17/24\n",
-      "----------\n",
-      "train Loss: 0.3195 Acc: 0.8566\n",
-      "val Loss: 0.2560 Acc: 0.9085\n",
-      "\n",
-      "Epoch 18/24\n",
-      "----------\n",
-      "train Loss: 0.2795 Acc: 0.8975\n",
-      "val Loss: 0.2528 Acc: 0.9150\n",
-      "\n",
-      "Epoch 19/24\n",
-      "----------\n",
-      "train Loss: 0.3156 Acc: 0.8770\n",
-      "val Loss: 0.2462 Acc: 0.9150\n",
-      "\n",
-      "Epoch 20/24\n",
+      "EfficientNet(\n",
+      "  (conv_stem): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
+      "  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "  (act1): ReLU(inplace=True)\n",
+      "  (blocks): Sequential(\n",
+      "    (0): Sequential(\n",
+      "      (0): DepthwiseSeparableConv(\n",
+      "        (conv_dw): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n",
+      "        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): ReLU(inplace=True)\n",
+      "        (conv_pw): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Identity()\n",
+      "      )\n",
+      "    )\n",
+      "    (1): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): ReLU(inplace=True)\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n",
+      "          (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n",
+      "          (2): Conv2d(64, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=64, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): ReLU(inplace=True)\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(96, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(96, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(20, 60, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(20, 60, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): ReLU(inplace=True)\n",
+      "        (conv_dw): Conv2d(120, 120, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=120, bias=False)\n",
+      "        (bn2): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): ReLU(inplace=True)\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(60, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(60, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "    (2): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(60, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=60, bias=False)\n",
+      "          (1): Conv2d(60, 60, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=60, bias=False)\n",
+      "          (2): Conv2d(60, 60, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=60, bias=False)\n",
+      "          (3): Conv2d(60, 60, kernel_size=(9, 9), stride=(2, 2), padding=(4, 4), groups=60, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(240, 20, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(20, 240, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): Conv2d(240, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn3): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(168, 168, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=168, bias=False)\n",
+      "          (1): Conv2d(168, 168, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=168, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(336, 28, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(28, 336, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (2): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(168, 168, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=168, bias=False)\n",
+      "          (1): Conv2d(168, 168, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=168, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(336, 28, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(28, 336, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (3): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(168, 168, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=168, bias=False)\n",
+      "          (1): Conv2d(168, 168, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=168, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(336, 28, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(28, 336, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "    (3): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(56, 336, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(112, 112, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=112, bias=False)\n",
+      "          (1): Conv2d(112, 112, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=112, bias=False)\n",
+      "          (2): Conv2d(112, 112, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=112, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(336, 14, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(14, 336, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): Conv2d(336, 104, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn3): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(156, 156, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=156, bias=False)\n",
+      "          (1): Conv2d(156, 156, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=156, bias=False)\n",
+      "          (2): Conv2d(156, 156, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=156, bias=False)\n",
+      "          (3): Conv2d(156, 156, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=156, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(624, 26, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(26, 624, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (2): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(156, 156, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=156, bias=False)\n",
+      "          (1): Conv2d(156, 156, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=156, bias=False)\n",
+      "          (2): Conv2d(156, 156, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=156, bias=False)\n",
+      "          (3): Conv2d(156, 156, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=156, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(624, 26, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(26, 624, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (3): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(156, 156, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=156, bias=False)\n",
+      "          (1): Conv2d(156, 156, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=156, bias=False)\n",
+      "          (2): Conv2d(156, 156, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=156, bias=False)\n",
+      "          (3): Conv2d(156, 156, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=156, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(624, 26, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(26, 624, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "    (4): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(104, 624, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): Conv2d(624, 624, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=624, bias=False)\n",
+      "        (bn2): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(624, 52, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(52, 624, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): Conv2d(624, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(120, 120, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=120, bias=False)\n",
+      "          (1): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n",
+      "          (2): Conv2d(120, 120, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=120, bias=False)\n",
+      "          (3): Conv2d(120, 120, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=120, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (2): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(120, 120, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=120, bias=False)\n",
+      "          (1): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n",
+      "          (2): Conv2d(120, 120, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=120, bias=False)\n",
+      "          (3): Conv2d(120, 120, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=120, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (3): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(120, 120, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=120, bias=False)\n",
+      "          (1): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n",
+      "          (2): Conv2d(120, 120, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=120, bias=False)\n",
+      "          (3): Conv2d(120, 120, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=120, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "    (5): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n",
+      "          (1): Conv2d(240, 240, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=240, bias=False)\n",
+      "          (2): Conv2d(240, 240, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=240, bias=False)\n",
+      "          (3): Conv2d(240, 240, kernel_size=(9, 9), stride=(2, 2), padding=(4, 4), groups=240, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(960, 80, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(80, 960, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): Conv2d(960, 264, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn3): BatchNorm2d(264, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(264, 1584, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(396, 396, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=396, bias=False)\n",
+      "          (1): Conv2d(396, 396, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=396, bias=False)\n",
+      "          (2): Conv2d(396, 396, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=396, bias=False)\n",
+      "          (3): Conv2d(396, 396, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=396, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(1584, 132, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(132, 1584, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(264, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (2): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(264, 1584, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(396, 396, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=396, bias=False)\n",
+      "          (1): Conv2d(396, 396, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=396, bias=False)\n",
+      "          (2): Conv2d(396, 396, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=396, bias=False)\n",
+      "          (3): Conv2d(396, 396, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=396, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(1584, 132, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(132, 1584, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(264, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (3): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(264, 1584, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(396, 396, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=396, bias=False)\n",
+      "          (1): Conv2d(396, 396, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=396, bias=False)\n",
+      "          (2): Conv2d(396, 396, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=396, bias=False)\n",
+      "          (3): Conv2d(396, 396, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=396, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(1584, 132, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(132, 1584, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(264, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "  )\n",
+      "  (conv_head): Conv2d(264, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "  (bn2): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "  (act2): ReLU(inplace=True)\n",
+      "  (global_pool): SelectAdaptivePool2d (output_size=1, pool_type=avg)\n",
+      "  (classifier): Linear(in_features=1536, out_features=1000, bias=True)\n",
+      ")\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(model_ft)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/pcoggins/serengeti-water\" target=\"_blank\">https://app.wandb.ai/pcoggins/serengeti-water</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/pcoggins/serengeti-water/runs/3muxudcy\" target=\"_blank\">https://app.wandb.ai/pcoggins/serengeti-water/runs/3muxudcy</a><br/>\n",
+       "            "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Epoch 0/4\n",
       "----------\n",
-      "train Loss: 0.3000 Acc: 0.8443\n",
-      "val Loss: 0.2486 Acc: 0.9281\n",
+      "train Loss: 0.3562 Acc: 0.8732\n",
+      "val Loss: 0.2677 Acc: 0.9030\n",
       "\n",
-      "Epoch 21/24\n",
+      "Epoch 1/4\n",
       "----------\n",
-      "train Loss: 0.2608 Acc: 0.8893\n",
-      "val Loss: 0.2388 Acc: 0.9150\n",
+      "train Loss: 0.2994 Acc: 0.8909\n",
+      "val Loss: 0.2654 Acc: 0.9052\n",
       "\n",
-      "Epoch 22/24\n",
+      "Epoch 2/4\n",
       "----------\n",
-      "train Loss: 0.2647 Acc: 0.8893\n",
-      "val Loss: 0.2506 Acc: 0.9281\n",
+      "train Loss: 0.2938 Acc: 0.8921\n",
+      "val Loss: 0.2513 Acc: 0.9050\n",
       "\n",
-      "Epoch 23/24\n",
+      "Epoch 3/4\n",
       "----------\n",
-      "train Loss: 0.2071 Acc: 0.9221\n",
-      "val Loss: 0.2492 Acc: 0.9216\n",
+      "train Loss: 0.2860 Acc: 0.8948\n",
+      "val Loss: 0.2521 Acc: 0.9082\n",
       "\n",
-      "Epoch 24/24\n",
+      "Epoch 4/4\n",
       "----------\n",
-      "train Loss: 0.2519 Acc: 0.8934\n",
-      "val Loss: 0.2466 Acc: 0.9346\n",
+      "train Loss: 0.2831 Acc: 0.8951\n",
+      "val Loss: 0.2361 Acc: 0.9087\n",
       "\n",
-      "Training complete in 1m 59s\n",
-      "Best val Acc: 0.934641\n"
+      "Training complete in 108m 29s\n",
+      "Best val Acc: 0.908668\n"
      ]
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "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\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
     }
    ],
    "source": [
@@ -688,12 +939,12 @@
     "#\n",
     "\n",
     "model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,\n",
-    "                       num_epochs=25)\n",
+    "                       num_epochs=5)\n",
     "\n",
     "######################################################################\n",
     "#\n",
     "\n",
-    "visualize_model(model_ft)\n",
+    "#visualize_model(model_ft)\n",
     "\n",
     "\n"
    ]
