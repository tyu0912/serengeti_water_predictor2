diff --git a/notebooks/pytorch_transfer_learning-Serengeti.ipynb b/notebooks/pytorch_transfer_learning-Serengeti.ipynb
index 06aee72..047a6b1 100644
--- a/notebooks/pytorch_transfer_learning-Serengeti.ipynb
+++ b/notebooks/pytorch_transfer_learning-Serengeti.ipynb
@@ -48,6 +48,9 @@
     "import time\n",
     "import os\n",
     "import copy\n",
+    "import timm\n",
+    "import wandb\n",
+    "wandb.init(project=\"my-project\")\n",
     "\n",
     "# New Libraries\n",
     "\n",
@@ -59,7 +62,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -92,18 +95,18 @@
     "        transforms.RandomResizedCrop(224),\n",
     "        transforms.RandomHorizontalFlip(),\n",
     "        transforms.ToTensor(),\n",
-    "        transforms.Normalize([0.485, 0.456, 0.406, 0.406], [0.229, 0.224, 0.225, 0.225])\n",
+    "        #transforms.Normalize([0.485, 0.456, 0.406, 0.406], [0.229, 0.224, 0.225, 0.225])\n",
     "    ]),\n",
     "    'val': transforms.Compose([\n",
     "        transforms.Resize(256),\n",
     "        transforms.CenterCrop(224),\n",
     "        transforms.ToTensor(),\n",
-    "        transforms.Normalize([0.485, 0.456, 0.406, 0.406], [0.229, 0.224, 0.225, 0.225])\n",
+    "        #transforms.Normalize([0.485, 0.456, 0.406, 0.406], [0.229, 0.224, 0.225, 0.225])\n",
     "    ]),\n",
     "}\n",
     "\n",
     "\n",
-    "data_dir = 'data/amazon_tiff_data'\n",
+    "data_dir = '~/data'\n",
     "image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) for x in ['train', 'val']}\n",
     "\n",
     "\n",
@@ -117,148 +120,64 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "['0', '1']\n"
+      "Compose(\n",
+      "    RandomResizedCrop(size=(224, 224), scale=(0.08, 1.0), ratio=(0.75, 1.3333), interpolation=PIL.Image.BILINEAR)\n",
+      "    RandomHorizontalFlip(p=0.5)\n",
+      "    ToTensor()\n",
+      "    Normalize(mean=[0.485, 0.456, 0.406, 0.406], std=[0.229, 0.224, 0.225, 0.225])\n",
+      ")\n",
+      "Compose(\n",
+      "    Resize(size=256, interpolation=PIL.Image.BILINEAR)\n",
+      "    CenterCrop(size=(224, 224))\n",
+      "    ToTensor()\n",
+      "    Normalize(mean=[0.485, 0.456, 0.406, 0.406], std=[0.229, 0.224, 0.225, 0.225])\n",
+      ")\n"
      ]
     }
    ],
    "source": [
-    "print(class_names)"
+    "print(data_transforms['train'])\n",
+    "print(data_transforms['val'])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [
     {
-     "name": "stderr",
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff141234d30>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "    self._shutdown_workers()\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff141234d30>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    w.join()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "    w.join()\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "AssertionError: can only join a child process\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "AssertionError: can only join a child process\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff13df46940>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    w.join()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "AssertionError: can only join a child process\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff13df46940>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff13df4eba8>>\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "Traceback (most recent call last):\n",
-      "    w.join()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    w.join()\n",
-      "AssertionError: can only join a child process\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "Exception ignored in: <bound method _MultiProcessingDataLoaderIter.__del__ of <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7ff13df4eba8>>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 961, in __del__\n",
-      "    self._shutdown_workers()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\", line 941, in _shutdown_workers\n",
-      "    w.join()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/process.py\", line 122, in join\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "AssertionError: can only join a child process\n",
-      "    assert self._parent_pid == os.getpid(), 'can only join a child process'\n",
-      "AssertionError: can only join a child process\n",
-      "Traceback (most recent call last):\n",
-      "Traceback (most recent call last):\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "Traceback (most recent call last):\n",
-      "Traceback (most recent call last):\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/queues.py\", line 230, in _feed\n",
-      "    close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 177, in close\n",
-      "    self._close()\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/multiprocessing/connection.py\", line 361, in _close\n",
-      "    _close(self._handle)\n",
-      "OSError: [Errno 9] Bad file descriptor\n",
-      "OSError: [Errno 9] Bad file descriptor\n"
+      "<torch.utils.data.dataloader.DataLoader object at 0x7f4d66c4b3c8>\n"
      ]
-    },
+    }
+   ],
+   "source": [
+    "print(dataloaders['train'])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
     {
-     "ename": "RuntimeError",
-     "evalue": "Caught RuntimeError in DataLoader worker process 0.\nOriginal Traceback (most recent call last):\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/worker.py\", line 178, in _worker_loop\n    data = fetcher.fetch(index)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py\", line 44, in fetch\n    data = [self.dataset[idx] for idx in possibly_batched_index]\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py\", line 44, in <listcomp>\n    data = [self.dataset[idx] for idx in possibly_batched_index]\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/datasets/folder.py\", line 140, in __getitem__\n    sample = self.transform(sample)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/transforms.py\", line 70, in __call__\n    img = t(img)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/transforms.py\", line 175, in __call__\n    return F.normalize(tensor, self.mean, self.std, self.inplace)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/functional.py\", line 218, in normalize\n    tensor.sub_(mean[:, None, None]).div_(std[:, None, None])\nRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 0\n",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
-      "\u001b[0;32m<ipython-input-14-feadf89a70ac>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# Get a batch of training data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclasses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataloaders\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'train'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# Make a grid from batch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    854\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m                 \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_task_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_process_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    857\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_try_put_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_process_data\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    879\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_put_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    880\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExceptionWrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 881\u001b[0;31m             \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreraise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    882\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    883\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/_utils.py\u001b[0m in \u001b[0;36mreraise\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    392\u001b[0m             \u001b[0;31m# (https://bugs.python.org/issue2651), so we work around it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    393\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKeyErrorMessage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 394\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexc_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
-      "\u001b[0;31mRuntimeError\u001b[0m: Caught RuntimeError in DataLoader worker process 0.\nOriginal Traceback (most recent call last):\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/worker.py\", line 178, in _worker_loop\n    data = fetcher.fetch(index)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py\", line 44, in fetch\n    data = [self.dataset[idx] for idx in possibly_batched_index]\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/utils/data/_utils/fetch.py\", line 44, in <listcomp>\n    data = [self.dataset[idx] for idx in possibly_batched_index]\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/datasets/folder.py\", line 140, in __getitem__\n    sample = self.transform(sample)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/transforms.py\", line 70, in __call__\n    img = t(img)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/transforms.py\", line 175, in __call__\n    return F.normalize(tensor, self.mean, self.std, self.inplace)\n  File \"/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torchvision/transforms/functional.py\", line 218, in normalize\n    tensor.sub_(mean[:, None, None]).div_(std[:, None, None])\nRuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 0\n"
-     ]
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
     }
    ],
    "source": [
@@ -271,9 +190,9 @@
     "def imshow(inp, title=None):\n",
     "    \"\"\"Imshow for Tensor.\"\"\"\n",
     "    inp = inp.numpy().transpose((1, 2, 0))\n",
-    "    mean = np.array([0.485, 0.456, 0.406, 0.406])\n",
-    "    std = np.array([0.229, 0.224, 0.225, 0.225])\n",
-    "    inp = std * inp + mean\n",
+    "    #mean = np.array([0.485, 0.456, 0.406, 0.406])\n",
+    "    #std = np.array([0.229, 0.224, 0.225, 0.225])\n",
+    "    #inp = std * inp + mean\n",
     "    inp = np.clip(inp, 0, 1)\n",
     "    plt.imshow(inp)\n",
     "    if title is not None:\n",
@@ -290,6 +209,26 @@
     "imshow(out, title=[class_names[x] for x in classes])\n"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([4, 3, 224, 224])"
+      ]
+     },
+     "execution_count": 8,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "inputs.size()"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": 4,
@@ -381,7 +320,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 25,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -423,36 +362,7 @@
    "cell_type": "code",
    "execution_count": 6,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Downloading: \"https://download.pytorch.org/models/resnet18-5c106cde.pth\" to /home/ubuntu/.cache/torch/checkpoints/resnet18-5c106cde.pth\n"
-     ]
-    },
-    {
-     "data": {
-      "application/vnd.jupyter.widget-view+json": {
-       "model_id": "c0a16220b34346f6a899693a94cd5f07",
-       "version_major": 2,
-       "version_minor": 0
-      },
-      "text/plain": [
-       "HBox(children=(FloatProgress(value=0.0, max=46827520.0), HTML(value='')))"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "######################################################################\n",
     "# Finetuning the convnet\n",
@@ -461,8 +371,9 @@
     "# Load a pretrained model and reset final fully connected layer.\n",
     "#\n",
     "\n",
-    "model_ft = models.resnet18(pretrained=True)\n",
-    "num_ftrs = model_ft.fc.in_features\n",
+    "model_ft = timm.create_model('mixnet_l', pretrained=True)\n",
+    "\n",
+    "num_ftrs = model_ft.classifier.in_features\n",
     "# Here the size of each output sample is set to 2.\n",
     "# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).\n",
     "model_ft.fc = nn.Linear(num_ftrs, 2)\n",
@@ -481,7 +392,478 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 28,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "EfficientNet(\n",
+      "  (conv_stem): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
+      "  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "  (act1): ReLU(inplace=True)\n",
+      "  (blocks): Sequential(\n",
+      "    (0): Sequential(\n",
+      "      (0): DepthwiseSeparableConv(\n",
+      "        (conv_dw): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n",
+      "        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): ReLU(inplace=True)\n",
+      "        (conv_pw): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Identity()\n",
+      "      )\n",
+      "    )\n",
+      "    (1): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): ReLU(inplace=True)\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n",
+      "          (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)\n",
+      "          (2): Conv2d(64, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=64, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): ReLU(inplace=True)\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(96, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(96, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(20, 60, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(20, 60, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): ReLU(inplace=True)\n",
+      "        (conv_dw): Conv2d(120, 120, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=120, bias=False)\n",
+      "        (bn2): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): ReLU(inplace=True)\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(60, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(60, 20, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "    (2): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(60, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=60, bias=False)\n",
+      "          (1): Conv2d(60, 60, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=60, bias=False)\n",
+      "          (2): Conv2d(60, 60, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=60, bias=False)\n",
+      "          (3): Conv2d(60, 60, kernel_size=(9, 9), stride=(2, 2), padding=(4, 4), groups=60, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(240, 20, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(20, 240, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): Conv2d(240, 56, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn3): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(168, 168, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=168, bias=False)\n",
+      "          (1): Conv2d(168, 168, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=168, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(336, 28, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(28, 336, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (2): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(168, 168, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=168, bias=False)\n",
+      "          (1): Conv2d(168, 168, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=168, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(336, 28, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(28, 336, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (3): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(28, 168, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(168, 168, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=168, bias=False)\n",
+      "          (1): Conv2d(168, 168, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=168, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(336, 28, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(28, 336, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(168, 28, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(56, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "    (3): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(56, 336, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(112, 112, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=112, bias=False)\n",
+      "          (1): Conv2d(112, 112, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=112, bias=False)\n",
+      "          (2): Conv2d(112, 112, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=112, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(336, 14, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(14, 336, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): Conv2d(336, 104, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn3): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(156, 156, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=156, bias=False)\n",
+      "          (1): Conv2d(156, 156, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=156, bias=False)\n",
+      "          (2): Conv2d(156, 156, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=156, bias=False)\n",
+      "          (3): Conv2d(156, 156, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=156, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(624, 26, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(26, 624, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (2): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(156, 156, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=156, bias=False)\n",
+      "          (1): Conv2d(156, 156, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=156, bias=False)\n",
+      "          (2): Conv2d(156, 156, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=156, bias=False)\n",
+      "          (3): Conv2d(156, 156, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=156, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(624, 26, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(26, 624, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (3): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(52, 312, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(156, 156, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=156, bias=False)\n",
+      "          (1): Conv2d(156, 156, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=156, bias=False)\n",
+      "          (2): Conv2d(156, 156, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=156, bias=False)\n",
+      "          (3): Conv2d(156, 156, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=156, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(624, 26, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(26, 624, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(312, 52, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "    (4): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(104, 624, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): Conv2d(624, 624, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=624, bias=False)\n",
+      "        (bn2): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(624, 52, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(52, 624, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): Conv2d(624, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(120, 120, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=120, bias=False)\n",
+      "          (1): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n",
+      "          (2): Conv2d(120, 120, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=120, bias=False)\n",
+      "          (3): Conv2d(120, 120, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=120, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (2): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(120, 120, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=120, bias=False)\n",
+      "          (1): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n",
+      "          (2): Conv2d(120, 120, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=120, bias=False)\n",
+      "          (3): Conv2d(120, 120, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=120, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (3): InvertedResidual(\n",
+      "        (conv_pw): MixedConv2d(\n",
+      "          (0): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(80, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(120, 120, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=120, bias=False)\n",
+      "          (1): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n",
+      "          (2): Conv2d(120, 120, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=120, bias=False)\n",
+      "          (3): Conv2d(120, 120, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=120, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "    (5): Sequential(\n",
+      "      (0): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n",
+      "          (1): Conv2d(240, 240, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=240, bias=False)\n",
+      "          (2): Conv2d(240, 240, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), groups=240, bias=False)\n",
+      "          (3): Conv2d(240, 240, kernel_size=(9, 9), stride=(2, 2), padding=(4, 4), groups=240, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(960, 80, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(80, 960, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): Conv2d(960, 264, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn3): BatchNorm2d(264, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (1): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(264, 1584, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(396, 396, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=396, bias=False)\n",
+      "          (1): Conv2d(396, 396, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=396, bias=False)\n",
+      "          (2): Conv2d(396, 396, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=396, bias=False)\n",
+      "          (3): Conv2d(396, 396, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=396, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(1584, 132, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(132, 1584, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(264, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (2): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(264, 1584, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(396, 396, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=396, bias=False)\n",
+      "          (1): Conv2d(396, 396, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=396, bias=False)\n",
+      "          (2): Conv2d(396, 396, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=396, bias=False)\n",
+      "          (3): Conv2d(396, 396, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=396, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(1584, 132, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(132, 1584, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(264, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "      (3): InvertedResidual(\n",
+      "        (conv_pw): Conv2d(264, 1584, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        (bn1): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act1): Swish()\n",
+      "        (conv_dw): MixedConv2d(\n",
+      "          (0): Conv2d(396, 396, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=396, bias=False)\n",
+      "          (1): Conv2d(396, 396, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=396, bias=False)\n",
+      "          (2): Conv2d(396, 396, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=396, bias=False)\n",
+      "          (3): Conv2d(396, 396, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), groups=396, bias=False)\n",
+      "        )\n",
+      "        (bn2): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "        (act2): Swish()\n",
+      "        (se): SqueezeExcite(\n",
+      "          (avg_pool): AdaptiveAvgPool2d(output_size=1)\n",
+      "          (conv_reduce): Conv2d(1584, 132, kernel_size=(1, 1), stride=(1, 1))\n",
+      "          (act1): Swish()\n",
+      "          (conv_expand): Conv2d(132, 1584, kernel_size=(1, 1), stride=(1, 1))\n",
+      "        )\n",
+      "        (conv_pwl): MixedConv2d(\n",
+      "          (0): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "          (1): Conv2d(792, 132, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "        )\n",
+      "        (bn3): BatchNorm2d(264, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "      )\n",
+      "    )\n",
+      "  )\n",
+      "  (conv_head): Conv2d(264, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
+      "  (bn2): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+      "  (act2): ReLU(inplace=True)\n",
+      "  (global_pool): SelectAdaptivePool2d (output_size=1, pool_type=avg)\n",
+      "  (classifier): Linear(in_features=1536, out_features=1000, bias=True)\n",
+      ")\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(model_ft)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
@@ -490,192 +872,42 @@
      "text": [
       "Epoch 0/24\n",
       "----------\n",
-      "train Loss: 0.6222 Acc: 0.6926\n",
-      "val Loss: 0.1738 Acc: 0.9346\n",
+      "train Loss: 0.2626 Acc: 0.9031\n",
+      "val Loss: 0.2252 Acc: 0.9133\n",
       "\n",
       "Epoch 1/24\n",
       "----------\n",
-      "train Loss: 0.8634 Acc: 0.7377\n",
-      "val Loss: 0.3860 Acc: 0.8889\n",
+      "train Loss: 0.2627 Acc: 0.9024\n",
+      "val Loss: 0.2268 Acc: 0.9126\n",
       "\n",
       "Epoch 2/24\n",
       "----------\n",
-      "train Loss: 0.6323 Acc: 0.7787\n",
-      "val Loss: 0.4995 Acc: 0.7843\n",
+      "train Loss: 0.2624 Acc: 0.9027\n",
+      "val Loss: 0.2265 Acc: 0.9128\n",
       "\n",
       "Epoch 3/24\n",
       "----------\n",
-      "train Loss: 0.5152 Acc: 0.7664\n",
-      "val Loss: 0.3715 Acc: 0.8758\n",
+      "train Loss: 0.2603 Acc: 0.9035\n",
+      "val Loss: 0.2264 Acc: 0.9106\n",
       "\n",
       "Epoch 4/24\n",
       "----------\n",
-      "train Loss: 0.5214 Acc: 0.7910\n",
-      "val Loss: 0.2577 Acc: 0.8954\n",
+      "train Loss: 0.2633 Acc: 0.9021\n",
+      "val Loss: 0.2283 Acc: 0.9123\n",
       "\n",
       "Epoch 5/24\n",
       "----------\n",
-      "train Loss: 0.5611 Acc: 0.8074\n",
-      "val Loss: 0.2525 Acc: 0.9085\n",
+      "train Loss: 0.2638 Acc: 0.9025\n",
+      "val Loss: 0.2268 Acc: 0.9116\n",
       "\n",
       "Epoch 6/24\n",
       "----------\n",
-      "train Loss: 0.4417 Acc: 0.8320\n",
-      "val Loss: 0.3667 Acc: 0.8693\n",
+      "train Loss: 0.2634 Acc: 0.9022\n",
+      "val Loss: 0.2264 Acc: 0.9119\n",
       "\n",
       "Epoch 7/24\n",
-      "----------\n",
-      "train Loss: 0.4239 Acc: 0.8279\n",
-      "val Loss: 0.2918 Acc: 0.9085\n",
-      "\n",
-      "Epoch 8/24\n",
-      "----------\n",
-      "train Loss: 0.4287 Acc: 0.8484\n",
-      "val Loss: 0.2830 Acc: 0.9150\n",
-      "\n",
-      "Epoch 9/24\n",
-      "----------\n",
-      "train Loss: 0.2964 Acc: 0.8689\n",
-      "val Loss: 0.2723 Acc: 0.9150\n",
-      "\n",
-      "Epoch 10/24\n",
-      "----------\n",
-      "train Loss: 0.3311 Acc: 0.8811\n",
-      "val Loss: 0.2610 Acc: 0.9281\n",
-      "\n",
-      "Epoch 11/24\n",
-      "----------\n",
-      "train Loss: 0.2874 Acc: 0.8648\n",
-      "val Loss: 0.2682 Acc: 0.9281\n",
-      "\n",
-      "Epoch 12/24\n",
-      "----------\n",
-      "train Loss: 0.2453 Acc: 0.8893\n",
-      "val Loss: 0.2517 Acc: 0.9346\n",
-      "\n",
-      "Epoch 13/24\n",
-      "----------\n",
-      "train Loss: 0.4938 Acc: 0.7828\n",
-      "val Loss: 0.2608 Acc: 0.9346\n",
-      "\n",
-      "Epoch 14/24\n",
-      "----------\n",
-      "train Loss: 0.2994 Acc: 0.8484\n",
-      "val Loss: 0.2360 Acc: 0.9281\n",
-      "\n",
-      "Epoch 15/24\n",
-      "----------\n",
-      "train Loss: 0.2433 Acc: 0.9016\n",
-      "val Loss: 0.2441 Acc: 0.9216\n",
-      "\n",
-      "Epoch 16/24\n",
-      "----------\n",
-      "train Loss: 0.2429 Acc: 0.9057\n",
-      "val Loss: 0.2429 Acc: 0.9085\n",
-      "\n",
-      "Epoch 17/24\n",
-      "----------\n",
-      "train Loss: 0.3195 Acc: 0.8566\n",
-      "val Loss: 0.2560 Acc: 0.9085\n",
-      "\n",
-      "Epoch 18/24\n",
-      "----------\n",
-      "train Loss: 0.2795 Acc: 0.8975\n",
-      "val Loss: 0.2528 Acc: 0.9150\n",
-      "\n",
-      "Epoch 19/24\n",
-      "----------\n",
-      "train Loss: 0.3156 Acc: 0.8770\n",
-      "val Loss: 0.2462 Acc: 0.9150\n",
-      "\n",
-      "Epoch 20/24\n",
-      "----------\n",
-      "train Loss: 0.3000 Acc: 0.8443\n",
-      "val Loss: 0.2486 Acc: 0.9281\n",
-      "\n",
-      "Epoch 21/24\n",
-      "----------\n",
-      "train Loss: 0.2608 Acc: 0.8893\n",
-      "val Loss: 0.2388 Acc: 0.9150\n",
-      "\n",
-      "Epoch 22/24\n",
-      "----------\n",
-      "train Loss: 0.2647 Acc: 0.8893\n",
-      "val Loss: 0.2506 Acc: 0.9281\n",
-      "\n",
-      "Epoch 23/24\n",
-      "----------\n",
-      "train Loss: 0.2071 Acc: 0.9221\n",
-      "val Loss: 0.2492 Acc: 0.9216\n",
-      "\n",
-      "Epoch 24/24\n",
-      "----------\n",
-      "train Loss: 0.2519 Acc: 0.8934\n",
-      "val Loss: 0.2466 Acc: 0.9346\n",
-      "\n",
-      "Training complete in 1m 59s\n",
-      "Best val Acc: 0.934641\n"
+      "----------\n"
      ]
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
     }
    ],
    "source": [
@@ -693,7 +925,7 @@
     "######################################################################\n",
     "#\n",
     "\n",
-    "visualize_model(model_ft)\n",
+    "#visualize_model(model_ft)\n",
     "\n",
     "\n"
    ]
