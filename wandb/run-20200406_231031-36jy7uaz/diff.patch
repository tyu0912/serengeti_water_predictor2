diff --git a/notebooks/pytorch_transfer_learning-Serengeti-Final.ipynb b/notebooks/pytorch_transfer_learning-Serengeti-Final.ipynb
index b023278..2aaed39 100644
--- a/notebooks/pytorch_transfer_learning-Serengeti-Final.ipynb
+++ b/notebooks/pytorch_transfer_learning-Serengeti-Final.ipynb
@@ -335,100 +335,6 @@
     "        self.imgs = self.samples"
    ]
   },
-  {
-   "cell_type": "code",
-   "execution_count": 32,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "ColorInterp.blue\n",
-      "ColorInterp.green\n",
-      "ColorInterp.red\n",
-      "ColorInterp.undefined\n",
-      "{'driver': 'GTiff', 'dtype': 'uint16', 'nodata': 0.0, 'width': 256, 'height': 256, 'count': 4, 'crs': CRS.from_epsg(32736), 'transform': Affine(3.0, 0.0, 634377.0,\n",
-      "       0.0, -3.0, 9768591.0), 'tiled': False, 'interleave': 'pixel', 'photometric': 'RGB'}\n",
-      "{'driver': 'GTiff', 'dtype': 'uint16', 'nodata': 0.0, 'width': 256, 'height': 256, 'count': 4, 'crs': CRS.from_epsg(32736), 'transform': Affine(3.0, 0.0, 634377.0,\n",
-      "       0.0, -3.0, 9768591.0), 'tiled': False, 'interleave': 'pixel'}\n"
-     ]
-    }
-   ],
-   "source": [
-    "# path = 'data/serengeti/val/1/20200208_074836_0f15_3B_AnalyticMS_SR_clip_232.tif'\n",
-    "\n",
-    "# with rasterio.Env(GTIFF_FORCE_RGBA=True, CPL_DEBUG=True):\n",
-    "#     src = rasterio.open(path)\n",
-    "#     print(src.colorinterp[0])\n",
-    "#     print(src.colorinterp[1])\n",
-    "#     print(src.colorinterp[2])\n",
-    "#     print(src.colorinterp[3])\n",
-    "#     profile = src.profile\n",
-    "#     profile['photometric'] = \"RGB\"\n",
-    "#     print(profile)\n",
-    "#     with rasterio.open(path, 'w', **profile) as dst:\n",
-    "#             dst.write(src.read())\n",
-    "#             print(dst.profile)\n",
-    "# #             dataset = f.read().astype(np.uint8)\n",
-    "# #             img= Image.fromarray(dataset, 'RGBA')\n",
-    "# #     #         img = Image.open(f)\n",
-    "# #             return img.convert('RGBA')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "serengeti = '/home/ubuntu/data/serengeti/train/0/20200208_074839_0f15_3B_AnalyticMS_SR_clip_95.tif'\n",
-    "# serengeti = '/home/ubuntu/data/amazon/train/0/train_9998.tif'\n",
-    "# Open the file:\n",
-    "# raster = gdal.Open(serengeti)\n",
-    "# print(raster)\n",
-    "\n",
-    "# print(gdal.Info(serengeti))\n",
-    "# dataset = raster.astype(np.uint8)\n",
-    "# img = Image.fromarray(dataset, 'RGBA')\n",
-    "# print(img)\n",
-    "\n",
-    "# with open(serengeti) as f:\n",
-    "#         print(f)\n",
-    "#         img = gdal.Open(f)\n",
-    "#         print(img)    \n",
-    "\n",
-    "with rasterio.open(serengeti) as f:\n",
-    "    print(f)\n",
-    "#         dataset = f.read().astype(np.uint8)\n",
-    "#         img = Image.fromarray(dataset, 'RGBA')\n",
-    "#         return img"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "AttributeError",
-     "evalue": "type object 'object' has no attribute '__getattr__'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
-      "\u001b[0;32m<ipython-input-17-dd73739838a0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mraster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprofile\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/osgeo/gdal.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   2012\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0m_s\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mMajorObject\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2013\u001b[0m         \u001b[0m__swig_getmethods__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__swig_getmethods__'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2014\u001b[0;31m     \u001b[0m__getattr__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0m_swig_getattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2015\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2016\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/osgeo/gdal.py\u001b[0m in \u001b[0;36m_swig_getattr\u001b[0;34m(self, class_type, name)\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_swig_getattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_swig_getattr_nondynamic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/osgeo/gdal.py\u001b[0m in \u001b[0;36m_swig_getattr_nondynamic\u001b[0;34m(self, class_type, name, static)\u001b[0m\n\u001b[1;32m     67\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mstatic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     70\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;31mAttributeError\u001b[0m: type object 'object' has no attribute '__getattr__'"
-     ]
-    }
-   ],
-   "source": [
-    "raster.profile"
-   ]
-  },
   {
    "cell_type": "code",
    "execution_count": 3,
@@ -510,19 +416,19 @@
     }
    ],
    "source": [
-    "mean = 0.0\n",
-    "for images, _ in dataloaders['train']:\n",
-    "    batch_samples = images.size(0) \n",
-    "    images = images.view(batch_samples, images.size(1), -1)\n",
-    "    mean += images.mean(2).sum(0)\n",
-    "mean = mean / len(dataloaders['train'].dataset)\n",
-    "\n",
-    "var = 0.0\n",
-    "for images, _ in dataloaders['train']:\n",
-    "    batch_samples = images.size(0)\n",
-    "    images = images.view(batch_samples, images.size(1), -1)\n",
-    "    var += ((images - mean.unsqueeze(1))**2).sum([0,2])\n",
-    "std = torch.sqrt(var / (len(dataloaders['train'].dataset)*224*224))"
+    "# mean = 0.0\n",
+    "# for images, _ in dataloaders['train']:\n",
+    "#     batch_samples = images.size(0) \n",
+    "#     images = images.view(batch_samples, images.size(1), -1)\n",
+    "#     mean += images.mean(2).sum(0)\n",
+    "# mean = mean / len(dataloaders['train'].dataset)\n",
+    "\n",
+    "# var = 0.0\n",
+    "# for images, _ in dataloaders['train']:\n",
+    "#     batch_samples = images.size(0)\n",
+    "#     images = images.view(batch_samples, images.size(1), -1)\n",
+    "#     var += ((images - mean.unsqueeze(1))**2).sum([0,2])\n",
+    "# std = torch.sqrt(var / (len(dataloaders['train'].dataset)*224*224))"
    ]
   },
   {
@@ -540,8 +446,8 @@
     }
    ],
    "source": [
-    "print(mean)\n",
-    "print(std)"
+    "# print(mean)\n",
+    "# print(std)"
    ]
   },
   {
@@ -700,9 +606,38 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 4,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Downloading: \"https://download.pytorch.org/models/resnet18-5c106cde.pth\" to /home/ubuntu/.cache/torch/checkpoints/resnet18-5c106cde.pth\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "0bac299d7ff246089efc3e16cc725141",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "HBox(children=(FloatProgress(value=0.0, max=46827520.0), HTML(value='')))"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    }
+   ],
    "source": [
     "######################################################################\n",
     "# Finetuning the convnet\n",
@@ -711,11 +646,20 @@
     "# Load a pretrained model and reset final fully connected layer.\n",
     "#\n",
     "\n",
-    "model_ft = timm.create_model('mixnet_l', pretrained=True)\n",
-    "model_ft.conv_stem = nn.Conv2d(4,32, kernel_size=(3,3), stride=(2,2), padding=(1,1), bias=False)\n",
+    "# MixNet Model Implementation\n",
+    "\n",
+    "# model_ft = timm.create_model('mixnet_l', pretrained=True)\n",
+    "# model_ft.conv_stem = nn.Conv2d(4,32, kernel_size=(3,3), stride=(2,2), padding=(1,1), bias=False)\n",
+    "\n",
+    "# num_ftrs = model_ft.classifier.in_features\n",
+    "# model_ft.classifier = nn.Linear(num_ftrs, 2)\n",
+    "\n",
+    "# ResNet-18 Model Implementation\n",
+    "\n",
+    "model_ft = models.resnet18(pretrained=True)\n",
+    "num_ftrs = model_ft.fc.in_features\n",
+    "model_ft.fc = nn.Linear(num_ftrs, 2)\n",
     "\n",
-    "num_ftrs = model_ft.classifier.in_features\n",
-    "model_ft.classifier = nn.Linear(num_ftrs, 2)\n",
     "\n",
     "# Here the size of each output sample is set to 2.\n",
     "# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).\n",
@@ -733,6 +677,110 @@
     "\n"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "ResNet(\n",
+       "  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
+       "  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (relu): ReLU(inplace=True)\n",
+       "  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
+       "  (layer1): Sequential(\n",
+       "    (0): BasicBlock(\n",
+       "      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (relu): ReLU(inplace=True)\n",
+       "      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "    )\n",
+       "    (1): BasicBlock(\n",
+       "      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (relu): ReLU(inplace=True)\n",
+       "      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "    )\n",
+       "  )\n",
+       "  (layer2): Sequential(\n",
+       "    (0): BasicBlock(\n",
+       "      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
+       "      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (relu): ReLU(inplace=True)\n",
+       "      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (downsample): Sequential(\n",
+       "        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
+       "        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      )\n",
+       "    )\n",
+       "    (1): BasicBlock(\n",
+       "      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (relu): ReLU(inplace=True)\n",
+       "      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "    )\n",
+       "  )\n",
+       "  (layer3): Sequential(\n",
+       "    (0): BasicBlock(\n",
+       "      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
+       "      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (relu): ReLU(inplace=True)\n",
+       "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (downsample): Sequential(\n",
+       "        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
+       "        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      )\n",
+       "    )\n",
+       "    (1): BasicBlock(\n",
+       "      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (relu): ReLU(inplace=True)\n",
+       "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "    )\n",
+       "  )\n",
+       "  (layer4): Sequential(\n",
+       "    (0): BasicBlock(\n",
+       "      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
+       "      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (relu): ReLU(inplace=True)\n",
+       "      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (downsample): Sequential(\n",
+       "        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
+       "        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      )\n",
+       "    )\n",
+       "    (1): BasicBlock(\n",
+       "      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "      (relu): ReLU(inplace=True)\n",
+       "      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
+       "      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "    )\n",
+       "  )\n",
+       "  (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)\n",
+       "  (fc): Linear(in_features=512, out_features=2, bias=True)\n",
+       ")"
+      ]
+     },
+     "execution_count": 5,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "model_ft.con\n",
+    "model_ft"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": 8,
diff --git a/notebooks/pytorch_transfer_learning.ipynb b/notebooks/pytorch_transfer_learning.ipynb
index a758e3b..ca5721d 100644
--- a/notebooks/pytorch_transfer_learning.ipynb
+++ b/notebooks/pytorch_transfer_learning.ipynb
@@ -562,7 +562,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.6.5"
+   "version": "3.6.10"
   }
  },
  "nbformat": 4,
