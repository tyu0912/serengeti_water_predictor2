diff --git a/notebooks/pytorch_transfer_learning-Serengeti-Final.ipynb b/notebooks/pytorch_transfer_learning-Serengeti-Final.ipynb
index cc1dc81..70c06bf 100644
--- a/notebooks/pytorch_transfer_learning-Serengeti-Final.ipynb
+++ b/notebooks/pytorch_transfer_learning-Serengeti-Final.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 1,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -27,6 +27,7 @@
     "import rasterio\n",
     "import gdal\n",
     "from rasterio.plot import reshape_as_raster, reshape_as_image\n",
+    "from datetime import datetime\n",
     "\n",
     "#gdal.SetConfigOption('GTIFF_FORCE_RGBA', 'YES')\n",
     "#import sklearn.metrics\n",
@@ -41,7 +42,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -430,7 +431,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -445,8 +446,9 @@
     "        transforms.RandomHorizontalFlip(),\n",
     "        transforms.ToTensor(),\n",
     "# Serengeti normalization\n",
-    "        transforms.Normalize([0.3427, 0.4095, 0.3815, 0.5000], [0.2544, 0.3212, 0.2478, 0.2292])\n",
-    "#         transforms.Normalize([0.3425, 0.3499, 0.3686, 0.3445], [0.2469, 0.2501, 0.2590, 0.2374])\n",
+    "#         transforms.Normalize([0.3741, 0.4309, 0.4041, 0.4997], [0.2645, 0.3126, 0.2533, 0.2287])\n",
+    "# Production normalization\n",
+    "        transforms.Normalize([0.4818, 0.4898, 0.4858, 0.5001], [0.2259, 0.2370, 0.2261, 0.2043])\n",
     "# Amazon normalization\n",
     "#         transforms.Normalize([0.4979, 0.5001, 0.5023, 0.4999], [0.2255, 0.2253, 0.2251, 0.2166])\n",
     "    ]),\n",
@@ -455,8 +457,9 @@
     "        transforms.CenterCrop(224),\n",
     "        transforms.ToTensor(),\n",
     "# Serengeti normalization\n",
-    "        transforms.Normalize([0.3427, 0.4095, 0.3815, 0.5000], [0.2544, 0.3212, 0.2478, 0.2292])\n",
-    "#         transforms.Normalize([0.3425, 0.3499, 0.3686, 0.3445], [0.2469, 0.2501, 0.2590, 0.2374])\n",
+    "#         transforms.Normalize([0.3741, 0.4309, 0.4041, 0.4997], [0.2645, 0.3126, 0.2533, 0.2287])\n",
+    "# Production normalization\n",
+    "        transforms.Normalize([0.4818, 0.4898, 0.4858, 0.5001], [0.2259, 0.2370, 0.2261, 0.2043])\n",
     "# Amazon nomalization\n",
     "#         transforms.Normalize([0.4979, 0.5001, 0.5023, 0.4999], [0.2255, 0.2253, 0.2251, 0.2166])\n",
     "\n",
@@ -464,8 +467,8 @@
     "}\n",
     "\n",
     "\n",
-    "data_dir = '~/data/serengeti'\n",
-    "# data_dir = '~/capstone_final_pct_water/notebooks/data/amazon_tiff_data'\n",
+    "data_dir = '~/data/prod'\n",
+    "# data_dir = '~/capstone_final_pct_water/notebooks/data/serengeti'\n",
     "\n",
     "image_datasets = {x: ImageFolder(os.path.join(data_dir, x), data_transforms[x]) for x in ['train', 'val']}\n",
     "\n",
@@ -480,9 +483,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 4,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n"
+     ]
+    }
+   ],
    "source": [
     "mean = 0.0\n",
     "for images, _ in dataloaders['train']:\n",
@@ -501,15 +527,15 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "tensor([0.3427, 0.4095, 0.3815, 0.5000])\n",
-      "tensor([0.2544, 0.3212, 0.2478, 0.2292])\n"
+      "tensor([0.4818, 0.4898, 0.4858, 0.5001])\n",
+      "tensor([0.2259, 0.2370, 0.2261, 0.2043])\n"
      ]
     }
    ],
@@ -520,12 +546,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 9,
    "metadata": {},
    "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n"
+     ]
+    },
     {
      "data": {
-      "image/png": "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\n",
+      "image/png": "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\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -565,14 +605,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [],
    "source": [
     "def train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n",
     "    since = time.time()\n",
-    "    wandb.init(project=\"serengeti-water-test\")\n",
-    "    wandb.watch(model)\n",
+    "#     wandb.init(project=\"serengeti-water\")\n",
+    "#     wandb.watch(model)\n",
     "\n",
     "    best_model_wts = copy.deepcopy(model.state_dict())\n",
     "    best_acc = 0.0\n",
@@ -639,7 +679,7 @@
     "#             print('{} Loss: {:.4f} | Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))\n",
     "            print('{} Loss: {:.4f} | Acc: {:.4f} | Prec: {:.4f} | Recall: {:.4f} | F1: {:.4f}'.format(\n",
     "                phase, epoch_loss, epoch_acc, epoch_prec, epoch_recall, epoch_f1))\n",
-    "            wandb.log({'{} Loss'.format(phase): epoch_loss, '{} Accuracy'.format(phase): epoch_acc, '{} Precision'.format(phase): epoch_prec, '{} Recall'.format(phase): epoch_recall, '{} F1-Score'.format(phase): epoch_f1})\n",
+    "#             wandb.log({'{} Loss'.format(phase): epoch_loss, '{} Accuracy'.format(phase): epoch_acc, '{} Precision'.format(phase): epoch_prec, '{} Recall'.format(phase): epoch_recall, '{} F1-Score'.format(phase): epoch_f1})\n",
     "\n",
     "            # deep copy the model\n",
     "            if phase == 'val' and epoch_acc > best_acc:\n",
@@ -653,13 +693,14 @@
     "\n",
     "    # load best model weights\n",
     "    model.load_state_dict(best_model_wts)\n",
+    "    torch.save(best_model_wts, 'models/model_{}.pt'.format(datetime.now()))\n",
     "    \n",
     "    return model\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -694,45 +735,88 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 6,
    "metadata": {
     "scrolled": true
    },
    "outputs": [
     {
-     "data": {
-      "text/html": [
-       "\n",
-       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/pcoggins/serengeti-water-test\" target=\"_blank\">https://app.wandb.ai/pcoggins/serengeti-water-test</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/pcoggins/serengeti-water-test/runs/g2j3qd6p\" target=\"_blank\">https://app.wandb.ai/pcoggins/serengeti-water-test/runs/g2j3qd6p</a><br/>\n",
-       "            "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Epoch 0/2\n",
+      "----------\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n"
+     ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 0/2\n",
-      "----------\n",
-      "train Loss: 0.2648 | Acc: 0.9270 | Prec: nan | Recall: 0.0000 | F1: nan\n",
-      "val Loss: 0.2483 | Acc: 0.9271 | Prec: nan | Recall: 0.0000 | F1: nan\n",
+      "train Loss: 0.6582 | Acc: 0.6667 | Prec: 0.6000 | Recall: 1.0000 | F1: 0.7500\n",
+      "val Loss: 0.6938 | Acc: 0.6667 | Prec: 0.6667 | Recall: 0.6667 | F1: 0.6667\n",
       "Epoch 1/2\n",
-      "----------\n",
-      "train Loss: 0.2515 | Acc: 0.9270 | Prec: nan | Recall: 0.0000 | F1: nan\n",
-      "val Loss: 0.2587 | Acc: 0.9252 | Prec: 0.0000 | Recall: 0.0000 | F1: nan\n",
+      "----------\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "train Loss: 0.6812 | Acc: 0.5000 | Prec: 0.5000 | Recall: 1.0000 | F1: 0.6667\n",
+      "val Loss: 0.6649 | Acc: 0.6667 | Prec: 0.6000 | Recall: 1.0000 | F1: 0.7500\n",
       "Epoch 2/2\n",
-      "----------\n",
-      "train Loss: 0.2465 | Acc: 0.9268 | Prec: 0.4000 | Recall: 0.0059 | F1: 0.0116\n",
-      "val Loss: 0.2315 | Acc: 0.9252 | Prec: 0.0000 | Recall: 0.0000 | F1: nan\n",
-      "Training complete in 8m 44s\n",
-      "Best val Acc: 0.927103\n"
+      "----------\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n",
+      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/rasterio/__init__.py:216: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.\n",
+      "  s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "train Loss: 0.6859 | Acc: 0.5000 | Prec: 0.5000 | Recall: 1.0000 | F1: 0.6667\n",
+      "val Loss: 0.6250 | Acc: 0.8333 | Prec: 0.7500 | Recall: 1.0000 | F1: 0.8571\n",
+      "Training complete in 0m 15s\n",
+      "Best val Acc: 0.833333\n"
+     ]
+    },
+    {
+     "ename": "AttributeError",
+     "evalue": "'EfficientNet' object has no attribute 'save_state_dict'",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
+      "\u001b[0;32m<ipython-input-6-36f967f0ca40>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mmodel_ft\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_ft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer_ft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexp_lr_scheduler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_epochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# model_ft.save_state_dict('models/mytraining_{}.pt'.format(datetime.now()))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m<ipython-input-4-345ff722a789>\u001b[0m in \u001b[0;36mtrain_model\u001b[0;34m(model, criterion, optimizer, scheduler, num_epochs)\u001b[0m\n\u001b[1;32m     83\u001b[0m     \u001b[0;31m# load best model weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_state_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbest_model_wts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 85\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_state_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'models/mixnet_{}.pt'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    574\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmodules\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    575\u001b[0m         raise AttributeError(\"'{}' object has no attribute '{}'\".format(\n\u001b[0;32m--> 576\u001b[0;31m             type(self).__name__, name))\n\u001b[0m\u001b[1;32m    577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    578\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;31mAttributeError\u001b[0m: 'EfficientNet' object has no attribute 'save_state_dict'"
      ]
     }
    ],
@@ -747,6 +831,8 @@
     "\n",
     "model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler, num_epochs=3)\n",
     "\n",
+    "# model_ft.save_state_dict('models/mytraining_{}.pt'.format(datetime.now()))\n",
+    "\n",
     "######################################################################\n",
     "\n",
     "#visualize_model(model_ft)\n",
@@ -794,6 +880,16 @@
     "        model.train(mode=was_training)\n"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "best_model_wts = copy.deepcopy(model_ft.state_dict())\n",
+    "\n"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,
